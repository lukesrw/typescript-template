{
    "version": 1.1,
    "atDirectives": [
        {
            "name": "@tailwind",
            "description": "Use the @tailwind directive to insert Tailwind's base, components, utilities and screens styles into your CSS.",
            "status": "nonstandard",
            "references": [
                {
                    "name": "tailwindcss.com Docs",
                    "url": "https://tailwindcss.com/docs/functions-and-directives#tailwind"
                }
            ]
        },
        {
            "name": "@layer",
            "description": "Use the @layer directive to tell Tailwind which \"bucket\" a set of custom styles belong to. Valid layers are a base, components, and utilities.\n\nTailwind will automatically move any CSS within a @layer directive to the same place as the corresponding @tailwind rule, so you don't have to worry as much about authoring your CSS in a specific order to avoid specificity issues.\n\nWrapping any custom CSS in a @layer directive also tells Tailwind to consider those styles for purging when purging that layer. Read our documentation on optimizing for production for more details.",
            "status": "nonstandard",
            "references": [
                {
                    "name": "tailwindcss.com Docs",
                    "url": "https://tailwindcss.com/docs/functions-and-directives#layer"
                }
            ]
        },
        {
            "name": "@variants",
            "description": "You can generate responsive, hover, focus, active, and other variants of your own utilities by wrapping their definitions in the @variants directive.\n\nIt's important to note that variants are generated in the order you specify them.\n\nSo if you want focus utilities to take priority over hover utilities for example, make sure focus comes after hover in the list.\n\nThe @variants at-rule supports all of the values that are supported in the variants section of your config file, as well as any custom variants added through plugins.",
            "status": "nonstandard",
            "references": [
                {
                    "name": "tailwindcss.com Docs",
                    "url": "https://tailwindcss.com/docs/functions-and-directives#variants"
                }
            ]
        },
        {
            "name": "@responsive",
            "description": "You can generate responsive variants of your own classes by wrapping their definitions in the @responsive directive.\n\nThis is a shortcut for writing out @variants responsive { ... } which works as well.\n\nThe responsive variants will be added to Tailwind's existing media queries at the end of your stylesheet. This makes sure that classes with a responsive prefix always defeat non-responsive classes that are targeting the same CSS property.",
            "status": "nonstandard",
            "references": [
                {
                    "name": "tailwindcss.com Docs",
                    "url": "https://tailwindcss.com/docs/functions-and-directives#responsive"
                }
            ]
        },
        {
            "name": "@screen",
            "description": "The @screen directive allows you to create media queries that reference your breakpoints by name instead of duplicating their values in your own CSS.\n\nFor example, say you have a sm breakpoint at 640px and you need to write some custom CSS that references this breakpoint.\n\nInstead of writing a raw media query that duplicates that breakpoint value, you can use the @screen directive and reference the breakpoint by name.",
            "status": "nonstandard",
            "references": [
                {
                    "name": "tailwindcss.com Docs",
                    "url": "https://tailwindcss.com/docs/functions-and-directives#screen"
                }
            ]
        }
    ]
}
